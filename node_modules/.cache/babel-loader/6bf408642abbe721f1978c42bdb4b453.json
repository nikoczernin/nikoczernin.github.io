{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    players: [],\n    // an array of strings, each being a player's name\n    recentGame: {\n      gameName: \"\",\n      // game name\n      setup: {},\n      // save the set rules, terms, teams, etc\n      progress: [] // save an object for every round\n\n    }\n  },\n  mutations: {\n    resetPlayers: function resetPlayers(state) {\n      // reset the players\n      state.players = [];\n    },\n    recentGameEnded: function recentGameEnded(state) {\n      // keep the players, reset everything else\n      state.recentGame.gameId = null;\n      state.recentGame.setup = {};\n      state.recentGame.progress = [];\n    },\n    addPlayer: function addPlayer(state, newPlayer) {\n      state.players.push(newPlayer);\n    },\n    removePlayer: function removePlayer(state, nameToRemove) {\n      state.players = state.players.filter(function (playerName) {\n        return playerName != nameToRemove;\n      });\n    },\n    updatePlayers: function updatePlayers(state, newPlayers) {\n      state.players = newPlayers;\n    },\n    shufflePlayers: function shufflePlayers(state) {//state.players = state.players\n    },\n    updateSetup: function updateSetup(state, newSetup) {\n      state.recentGame.setup = newSetup;\n    },\n    addToProgress: function addToProgress(state, newInfo) {\n      state.recentGame.progress.push(newInfo);\n    }\n  },\n  getters: {\n    getPlayers: function getPlayers(state) {\n      return state.players;\n    },\n    getRecentGame: function getRecentGame(state) {\n      return state.recentGame;\n    }\n  },\n  actions: {},\n  modules: {}\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","players","recentGame","gameName","setup","progress","mutations","resetPlayers","recentGameEnded","gameId","addPlayer","newPlayer","push","removePlayer","nameToRemove","filter","playerName","updatePlayers","newPlayers","shufflePlayers","updateSetup","newSetup","addToProgress","newInfo","getters","getPlayers","getRecentGame","actions","modules"],"sources":["/Users/nikoczernin/Documents/Programming/Web/snobs/snobs/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    players: [], // an array of strings, each being a player's name\n    recentGame: {\n      gameName: \"\", // game name\n      setup: {}, // save the set rules, terms, teams, etc\n      progress: [] // save an object for every round\n    }\n  },\n\n  mutations: {\n    resetPlayers(state) { // reset the players\n      state.players = []\n    },\n    recentGameEnded(state){ // keep the players, reset everything else\n      state.recentGame.gameId = null\n      state.recentGame.setup = {}\n      state.recentGame.progress = []\n    },\n    \n    addPlayer(state, newPlayer) {\n      state.players.push(newPlayer)\n    },\n    removePlayer(state, nameToRemove) {\n      state.players = state.players.filter(function (playerName) {\n        return playerName != nameToRemove\n      });\n    },\n    updatePlayers(state, newPlayers){\n      state.players = newPlayers\n    },\n    shufflePlayers(state){\n      //state.players = state.players\n    },\n    \n\n    updateSetup(state, newSetup){\n      state.recentGame.setup = newSetup\n    },\n\n\n    addToProgress(state, newInfo){\n      state.recentGame.progress.push(newInfo)\n    },\n  },\n\n  getters: {\n    getPlayers: state => state.players,\n    getRecentGame: state => state.recentGame,\n  },\n\n  actions: {\n  },\n  modules: {\n  }\n})\n"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;EAC5BC,KAAK,EAAE;IACLC,OAAO,EAAE,EADJ;IACQ;IACbC,UAAU,EAAE;MACVC,QAAQ,EAAE,EADA;MACI;MACdC,KAAK,EAAE,EAFG;MAEC;MACXC,QAAQ,EAAE,EAHA,CAGG;;IAHH;EAFP,CADqB;EAU5BC,SAAS,EAAE;IACTC,YADS,wBACIP,KADJ,EACW;MAAE;MACpBA,KAAK,CAACC,OAAN,GAAgB,EAAhB;IACD,CAHQ;IAITO,eAJS,2BAIOR,KAJP,EAIa;MAAE;MACtBA,KAAK,CAACE,UAAN,CAAiBO,MAAjB,GAA0B,IAA1B;MACAT,KAAK,CAACE,UAAN,CAAiBE,KAAjB,GAAyB,EAAzB;MACAJ,KAAK,CAACE,UAAN,CAAiBG,QAAjB,GAA4B,EAA5B;IACD,CARQ;IAUTK,SAVS,qBAUCV,KAVD,EAUQW,SAVR,EAUmB;MAC1BX,KAAK,CAACC,OAAN,CAAcW,IAAd,CAAmBD,SAAnB;IACD,CAZQ;IAaTE,YAbS,wBAaIb,KAbJ,EAaWc,YAbX,EAayB;MAChCd,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAN,CAAcc,MAAd,CAAqB,UAAUC,UAAV,EAAsB;QACzD,OAAOA,UAAU,IAAIF,YAArB;MACD,CAFe,CAAhB;IAGD,CAjBQ;IAkBTG,aAlBS,yBAkBKjB,KAlBL,EAkBYkB,UAlBZ,EAkBuB;MAC9BlB,KAAK,CAACC,OAAN,GAAgBiB,UAAhB;IACD,CApBQ;IAqBTC,cArBS,0BAqBMnB,KArBN,EAqBY,CACnB;IACD,CAvBQ;IA0BToB,WA1BS,uBA0BGpB,KA1BH,EA0BUqB,QA1BV,EA0BmB;MAC1BrB,KAAK,CAACE,UAAN,CAAiBE,KAAjB,GAAyBiB,QAAzB;IACD,CA5BQ;IA+BTC,aA/BS,yBA+BKtB,KA/BL,EA+BYuB,OA/BZ,EA+BoB;MAC3BvB,KAAK,CAACE,UAAN,CAAiBG,QAAjB,CAA0BO,IAA1B,CAA+BW,OAA/B;IACD;EAjCQ,CAViB;EA8C5BC,OAAO,EAAE;IACPC,UAAU,EAAE,oBAAAzB,KAAK;MAAA,OAAIA,KAAK,CAACC,OAAV;IAAA,CADV;IAEPyB,aAAa,EAAE,uBAAA1B,KAAK;MAAA,OAAIA,KAAK,CAACE,UAAV;IAAA;EAFb,CA9CmB;EAmD5ByB,OAAO,EAAE,EAnDmB;EAqD5BC,OAAO,EAAE;AArDmB,CAAf,CAAf"},"metadata":{},"sourceType":"module"}