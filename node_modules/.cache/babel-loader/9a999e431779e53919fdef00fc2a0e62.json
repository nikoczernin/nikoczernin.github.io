{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Header from './components/Header';\nimport Menu from './components/Menu';\nexport default {\n  name: 'App',\n  components: {\n    Header: Header,\n    Menu: Menu\n  },\n  data: function data() {\n    return {\n      players: [],\n      // an array of strings, each being a player's name\n      recentGame: {\n        setup: {},\n        // save the set rules, terms, teams, etc\n        progress: [] // save an object for every round\n\n      },\n      menuOpen: false\n    };\n  },\n  methods: {\n    menuToggle: function menuToggle() {\n      this.menuOpen = !this.menuOpen;\n    },\n    endRecentGame: function endRecentGame() {\n      //keep the players, reset rest\n      alert(\"aus is\");\n      this.recentGame.game = null;\n      this.recentGame.setup = {};\n      this.recentGame.progress = [];\n    },\n    // App.players is an array of strings\n    resetPlayers: function resetPlayers() {\n      this.players = [];\n    },\n    addPlayer: function addPlayer(player) {\n      if (typeof player != \"string\") {\n        this.players = this.players.concat(player);\n      } else {\n        this.players.push(player);\n      }\n    },\n    removePlayer: function removePlayer(nameToRemove) {\n      // return the array of players but filter out the nameToRemove\n      this.players = this.players.filter(function (playerName) {\n        return playerName != nameToRemove;\n      });\n    },\n    shufflePlayers: function shufflePlayers() {\n      console.log(\"I didn't fucking implement that function yet\");\n    },\n    updateSetup: function updateSetup(newSetup) {\n      //expect the full setup object from a child\n      this.recentGame.setup = newSetup;\n    },\n    addToProgress: function addToProgress(newInfo) {\n      // keep an array of everything that happens\n      this.recentGame.progress.push(newInfo);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AAEA;EACAA,WADA;EAEAC;IACAC,cADA;IAEAC;EAFA,CAFA;EAOAC;IAAA;MACAC,WADA;MACA;MACAC;QACAC,SADA;QACA;QACAC,YAFA,CAEA;;MAFA,CAFA;MAMAC;IANA;EAAA,CAPA;EAkBAC;IACAC,UADA,wBACA;MACA;IACA,CAHA;IAKAC,aALA,2BAKA;MAAA;MACAC;MACA;MACA;MACA;IACA,CAVA;IAYA;IACAC,YAbA,0BAaA;MACA;IACA,CAfA;IAkBAC,SAlBA,qBAkBAC,MAlBA,EAkBA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAxBA;IA0BAC,YA1BA,wBA0BAC,YA1BA,EA0BA;MACA;MACA;QACA;MACA,CAFA;IAGA,CA/BA;IAiCAC,cAjCA,4BAiCA;MACAC;IACA,CAnCA;IAqCAC,WArCA,uBAqCAC,QArCA,EAqCA;MACA;MACA;IACA,CAxCA;IA0CAC,aA1CA,yBA0CAC,OA1CA,EA0CA;MACA;MACA;IACA;EA7CA;AAlBA","names":["name","components","Header","Menu","data","players","recentGame","setup","progress","menuOpen","methods","menuToggle","endRecentGame","alert","resetPlayers","addPlayer","player","removePlayer","nameToRemove","shufflePlayers","console","updateSetup","newSetup","addToProgress","newInfo"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n\n  <v-app \n  >\n    <Header \n      :gameName=\"recentGame.game\" \n      id=\"header\"\n      @menuToggle=\"menuOpen = !menuOpen\"\n    />\n\n    <Menu\n      :menuOpen=\"menuOpen\"\n    />\n\n    <v-container\n      class=\"pa-5\"\n    >\n      <v-main>\n        <transition name=\"fade\" mode=\"out-in\">\n          <router-view \n            @endRecentGame=\"endRecentGame\"\n            :players=\"players\" \n              @resetPlayers=\"resetPlayers\"\n              @addPlayer=\"addPlayer\"\n              @removePlayer=\"removePlayer\"\n            :recentGame=\"recentGame\" \n              @updateSetup=\"updateSetup\"\n              @addToProgress=\"addToProgress\" \n          />\n        </transition>\n        {{recentGame}}\n      </v-main>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport Header from './components/Header'\nimport Menu from './components/Menu'\n\nexport default {\n  name: 'App',\n  components: {\n    Header,\n    Menu\n  },\n\n  data: () => ({\n    players: [], // an array of strings, each being a player's name\n    recentGame: {\n      setup: {}, // save the set rules, terms, teams, etc\n      progress: [] // save an object for every round\n    },\n    menuOpen: false\n  }),\n\n\n\n  methods: {\n    menuToggle(){\n      this.menuOpen = !this.menuOpen\n    },\n\n    endRecentGame(){ //keep the players, reset rest\n      alert(\"aus is\")\n      this.recentGame.game = null\n      this.recentGame.setup = {}\n      this.recentGame.progress = []\n    },\n    \n    // App.players is an array of strings\n    resetPlayers(){\n      this.players = []\n    },\n\n\n    addPlayer(player){\n      if (typeof player != \"string\"){\n        this.players = this.players.concat(player)\n      } else {\n        this.players.push(player)\n      }\n},\n\n    removePlayer(nameToRemove){\n      // return the array of players but filter out the nameToRemove\n      this.players = this.players.filter(function (playerName) {\n        return playerName != nameToRemove\n      });\n    },\n\n    shufflePlayers(){\n      console.log(\"I didn't fucking implement that function yet\")\n    },\n\n    updateSetup(newSetup){ \n      //expect the full setup object from a child\n      this.recentGame.setup = newSetup\n    },\n\n    addToProgress(newInfo){\n      // keep an array of everything that happens\n      this.recentGame.progress.push(newInfo)\n    },\n  }\n};\n</script>\n\n\n<style scoped>\n  .fade-enter, .fade-leave-to {\n    opacity: 0;\n  }\n\n  .fade-enter-active, .fade-leave-active {\n    transition: opacity 0.2s ease-out;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}